
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BDMWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BDMWebService {


    /**
     * 
     * @param bookId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isAvailable", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsAvailable")
    @ResponseWrapper(localName = "isAvailableResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsAvailableResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/isAvailableRequest", output = "http://ws.session.ejb/BDMWebService/isAvailableResponse")
    public boolean isAvailable(
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId);

    /**
     * 
     * @param identityNum
     * @param bookId
     * @return
     *     returns boolean
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isReservedByHimself", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsReservedByHimself")
    @ResponseWrapper(localName = "isReservedByHimselfResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsReservedByHimselfResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/isReservedByHimselfRequest", output = "http://ws.session.ejb/BDMWebService/isReservedByHimselfResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/isReservedByHimself/Fault/MemberNotFoundException")
    })
    public boolean isReservedByHimself(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum,
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param bookId
     * @return
     *     returns javax.xml.datatype.XMLGregorianCalendar
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBookAvailability", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetBookAvailability")
    @ResponseWrapper(localName = "getBookAvailabilityResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetBookAvailabilityResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/getBookAvailabilityRequest", output = "http://ws.session.ejb/BDMWebService/getBookAvailabilityResponse")
    public XMLGregorianCalendar getBookAvailability(
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId);

    /**
     * 
     * @param identityNum
     * @return
     *     returns java.util.List<ws.client.LendingEntity>
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewLentBooks", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewLentBooks")
    @ResponseWrapper(localName = "viewLentBooksResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewLentBooksResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/viewLentBooksRequest", output = "http://ws.session.ejb/BDMWebService/viewLentBooksResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/viewLentBooks/Fault/MemberNotFoundException")
    })
    public List<LendingEntity> viewLentBooks(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param identityNum
     * @return
     *     returns java.util.List<ws.client.BookEntity>
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewBooksLent", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewBooksLent")
    @ResponseWrapper(localName = "viewBooksLentResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewBooksLentResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/viewBooksLentRequest", output = "http://ws.session.ejb/BDMWebService/viewBooksLentResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/viewBooksLent/Fault/MemberNotFoundException")
    })
    public List<BookEntity> viewBooksLent(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param lendingId
     * @return
     *     returns javax.xml.datatype.XMLGregorianCalendar
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "extendBook", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ExtendBook")
    @ResponseWrapper(localName = "extendBookResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ExtendBookResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/extendBookRequest", output = "http://ws.session.ejb/BDMWebService/extendBookResponse")
    public XMLGregorianCalendar extendBook(
        @WebParam(name = "lendingId", targetNamespace = "")
        long lendingId);

    /**
     * 
     * @param lendingId
     * @return
     *     returns boolean
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isOverdue", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsOverdue")
    @ResponseWrapper(localName = "isOverdueResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsOverdueResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/isOverdueRequest", output = "http://ws.session.ejb/BDMWebService/isOverdueResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/isOverdue/Fault/MemberNotFoundException")
    })
    public boolean isOverdue(
        @WebParam(name = "lendingId", targetNamespace = "")
        Long lendingId)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param bookId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isReserved", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsReserved")
    @ResponseWrapper(localName = "isReservedResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsReservedResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/isReservedRequest", output = "http://ws.session.ejb/BDMWebService/isReservedResponse")
    public boolean isReserved(
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId);

    /**
     * 
     * @param identityNum
     * @param securityCode
     * @return
     *     returns ws.client.MemberEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "memberLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.MemberLogin")
    @ResponseWrapper(localName = "memberLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.MemberLoginResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/memberLoginRequest", output = "http://ws.session.ejb/BDMWebService/memberLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/BDMWebService/memberLogin/Fault/InvalidLoginCredentialException")
    })
    public MemberEntity memberLogin(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum,
        @WebParam(name = "securityCode", targetNamespace = "")
        String securityCode)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param identityNum
     * @return
     *     returns java.util.List<ws.client.FineEntity>
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFines", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetFines")
    @ResponseWrapper(localName = "getFinesResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetFinesResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/getFinesRequest", output = "http://ws.session.ejb/BDMWebService/getFinesResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/getFines/Fault/MemberNotFoundException")
    })
    public List<FineEntity> getFines(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param lendingId
     */
    @WebMethod
    @RequestWrapper(localName = "returnBook", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ReturnBook")
    @ResponseWrapper(localName = "returnBookResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ReturnBookResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/returnBookRequest", output = "http://ws.session.ejb/BDMWebService/returnBookResponse")
    public void returnBook(
        @WebParam(name = "lendingId", targetNamespace = "")
        long lendingId);

    /**
     * 
     * @param search
     * @return
     *     returns java.util.List<ws.client.BookEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchBook", targetNamespace = "http://ws.session.ejb/", className = "ws.client.SearchBook")
    @ResponseWrapper(localName = "searchBookResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.SearchBookResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/searchBookRequest", output = "http://ws.session.ejb/BDMWebService/searchBookResponse")
    public List<BookEntity> searchBook(
        @WebParam(name = "search", targetNamespace = "")
        String search);

    /**
     * 
     * @param identityNum
     * @param bookId
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "reserveBook", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ReserveBook")
    @ResponseWrapper(localName = "reserveBookResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ReserveBookResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/reserveBookRequest", output = "http://ws.session.ejb/BDMWebService/reserveBookResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/reserveBook/Fault/MemberNotFoundException")
    })
    public void reserveBook(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum,
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param identityNum
     * @return
     *     returns boolean
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hasFine", targetNamespace = "http://ws.session.ejb/", className = "ws.client.HasFine")
    @ResponseWrapper(localName = "hasFineResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.HasFineResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/hasFineRequest", output = "http://ws.session.ejb/BDMWebService/hasFineResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/hasFine/Fault/MemberNotFoundException")
    })
    public boolean hasFine(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param identityNum
     * @param bookId
     * @return
     *     returns boolean
     * @throws MemberNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isLoanedByMember", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsLoanedByMember")
    @ResponseWrapper(localName = "isLoanedByMemberResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IsLoanedByMemberResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/isLoanedByMemberRequest", output = "http://ws.session.ejb/BDMWebService/isLoanedByMemberResponse", fault = {
        @FaultAction(className = MemberNotFoundException_Exception.class, value = "http://ws.session.ejb/BDMWebService/isLoanedByMember/Fault/MemberNotFoundException")
    })
    public boolean isLoanedByMember(
        @WebParam(name = "identityNum", targetNamespace = "")
        String identityNum,
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId)
        throws MemberNotFoundException_Exception
    ;

    /**
     * 
     * @param identityNumber
     * @param bookId
     */
    @WebMethod
    @RequestWrapper(localName = "payFines", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PayFines")
    @ResponseWrapper(localName = "payFinesResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PayFinesResponse")
    @Action(input = "http://ws.session.ejb/BDMWebService/payFinesRequest", output = "http://ws.session.ejb/BDMWebService/payFinesResponse")
    public void payFines(
        @WebParam(name = "identityNumber", targetNamespace = "")
        String identityNumber,
        @WebParam(name = "bookId", targetNamespace = "")
        Long bookId);

}
